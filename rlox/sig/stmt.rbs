class Stmt
  include Visitable

  class Block < Stmt
    attr_reader statements: Array[Stmt]

    def initialize: (Array[Stmt] statements) -> void
  end

  class Expression < Stmt
    attr_reader expr: Expr

    def initialize: (Expr expr) -> void
  end

  class If < Stmt
    attr_reader condition: Expr
    attr_reader then_branch: Stmt
    attr_reader else_branch: Stmt | nil

    def initialize: (Expr condition, Stmt then_branch, Stmt? else_branch) -> void
  end

  class Print < Stmt
    attr_reader expr: Expr

    def initialize: (Expr expr) -> void
  end

  class Var < Stmt
    attr_reader name: Token

    attr_reader initializer: Expr | nil

    def initialize: (Token name, Expr | nil initializer) -> void
  end

  class While < Stmt
    attr_reader condition: Expr
    attr_reader body: Stmt

    def initialize: (Expr condition, Stmt body) -> void
  end
end


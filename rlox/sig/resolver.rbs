class Resolver
  class ResolverError < LoxError
    attr_reader token: Token

    def initialize: (Token token, String message) -> void
  end

  type function_type = :none | :function

  @interpreter: Interpreter
  @scopes: Array[Hash[String, bool]]
  @current_function_type: function_type

  def initialize: (Interpreter interpreter) -> void

  def resolve: (Array[Stmt] statements) -> void

  def visit_stmt_block: (Stmt::Block stmt) -> void

  def visit_stmt_print: (Stmt::Print stmt) -> void

  def visit_stmt_return: (Stmt::Return stmt) -> void

  def visit_stmt_var: (Stmt::Var stmt) -> void

  def visit_stmt_while: (Stmt::While stmt) -> void

  def visit_stmt_expression: (Stmt::Expression stmt) -> lox_value

  def visit_stmt_if: (Stmt::If stmt) -> void

  def visit_expr_assign: (Expr::Assign expr) -> lox_value

  def visit_expr_binary: (Expr::Binary expr) -> lox_value

  def visit_expr_grouping: (Expr::Grouping expr) -> lox_value

  def visit_expr_literal: (Expr::Literal expr) -> lox_value

  def visit_expr_logical: (Expr::Logical expr) -> lox_value

  def visit_expr_unary: (Expr::Unary expr) -> lox_value

  def visit_expr_variable: (Expr::Variable expr) -> lox_value

  private

  def visit: (Expr | Stmt expr_or_stmt) -> lox_value

  def begin_scope: () -> void

  def end_scope: () -> void

  def declare: (Token name) -> void

  def define: (Token name) -> void

  def resolve_local: (Expr expr, Token name) -> void

  def resolve_function: (Stmt::Function, function_type type) -> void
end

class Interpreter
  class InterpreterError < LoxError
    attr_reader token: Token

    def initialize: (Token token, String message) -> void
  end

  @environment: Environment

  def initialize: (?Environment? environment) -> void

  def interpret: (Array[Stmt] statements) -> void

  def visit_stmt_block: (Stmt::Block stmt) -> void

  def visit_stmt_print: (Stmt::Print stmt) -> void

  def visit_stmt_return: (Stmt::Return stmt) -> void

  def visit_stmt_var: (Stmt::Var stmt) -> void

  def visit_stmt_while: (Stmt::While stmt) -> void

  def visit_stmt_expression: (Stmt::Expression stmt) -> lox_value

  def visit_stmt_if: (Stmt::If stmt) -> void

  def visit_expr_assign: (Expr::Assign expr) -> lox_value

  def visit_expr_binary: (Expr::Binary expr) -> lox_value

  def visit_expr_grouping: (Expr::Grouping expr) -> lox_value

  def visit_expr_literal: (Expr::Literal expr) -> lox_value

  def visit_expr_logical: (Expr::Logical expr) -> lox_value

  def visit_expr_unary: (Expr::Unary expr) -> lox_value

  def visit_expr_variable: (Expr::Variable expr) -> lox_value

  private

  def evaluate: (Expr | Stmt expr_or_stmt) -> lox_value

  def stringify: (lox_value lox_val) -> String

  def truthy?: (top val) -> bool

  def equal?: (top a, top b) -> bool

  def check_number_operand: (Token operator, top operand) -> void

  def check_number_operands: (Token operator, top left, top right) -> void

  def check_number_or_string_operands: (Token operator, top left, top right) -> void
end
